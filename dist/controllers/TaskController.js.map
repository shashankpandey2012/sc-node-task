{"version":3,"sources":["../../controllers/TaskController.js"],"names":["apply_json_patch","req","res","json","body","log","patch_object","patch","patch_array","apply","err","create_thumbnail","image_url","query","read","image","resize","write","img","dir","__dirname","dirname","sendFile"],"mappings":";;;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;;;;kBAIe;;AAEX;;;;AAIAA,sBAAkB,0BAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B,YAAIC,OAAOF,IAAIG,IAAJ,CAASD,IAApB;AACA,yBAAOE,GAAP,CAAW,MAAX,EAAmB,cAAnB,EAAmCF,IAAnC;AACA,YAAIG,eAAeL,IAAIG,IAAJ,CAASG,KAA5B;AACA,yBAAOF,GAAP,CAAW,MAAX,EAAmB,eAAnB,EAAqCC,YAArC;AACA,YAAIE,cAAc,EAAlB;AACAA,oBAAY,CAAZ,IAAiBF,YAAjB;AACA,YAAI;AACA,oCAAUG,KAAV,CAAgBN,IAAhB,EAAsBK,WAAtB;AACA,6BAAOH,GAAP,CAAW,MAAX,EAAmB,uBAAnB,EAA6CF,IAA7C;AACA,uCAAYD,GAAZ,EAAiBC,IAAjB,EAAuB,IAAvB,EAA6B,GAA7B;AACH,SAJD,CAKA,OAAOO,GAAP,EAAY;AACR,6BAAOL,GAAP,CAAW,OAAX,EAAoBK,GAApB;AACA,uCAAYR,GAAZ,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,GAAlC;AACH;AACJ,KAtBU;;AAwBX;;;;AAIAS,sBAAkB,0BAACV,GAAD,EAAMC,GAAN,EAAc;AAC5B,YAAIU,YAAYX,IAAIY,KAAJ,CAAUD,SAA1B;AACA,yBAAOP,GAAP,CAAW,MAAX,EAAmB,YAAnB,EAAkCO,SAAlC;AACA,uBAAKE,IAAL,CAAUF,SAAV,EAAqB,UAACF,GAAD,EAAMK,KAAN,EAAgB;AACjC,gBAAIL,OAAO,CAACK,KAAZ,EAAmB;AACf,iCAAOV,GAAP,CAAW,OAAX,EAAoBK,GAApB;AACA,2CAAYR,GAAZ,EAAiB,IAAjB,EAAuB,0BAAvB,EAAmD,GAAnD;AACH,aAHD,MAIK;AACDa,sBAAMC,MAAN,CAAa,EAAb,EAAiB,EAAjB,EACKC,KADL,4BACsC,UAACP,GAAD,EAAMQ,GAAN,EAAc;AAC5C,wBAAIR,OAAO,CAACQ,GAAZ,EAAiB;AACb,yCAAOb,GAAP,CAAW,OAAX,EAAoBK,GAApB;AACA,mDAAYR,GAAZ,EAAiB,IAAjB,EAAuB,6BAAvB,EAAsD,GAAtD;AACH,qBAHD,MAIK;AACD,4BAAIiB,MAAM,mBAAMC,SAAN,EAAiB,QAAjB,CAAV;AACA,4BAAIC,UAAUF,IAAI,CAAJ,CAAd;AACAjB,4BAAIoB,QAAJ,CAAgBD,OAAhB,iCAAqD,EAArD,EAAyD,UAAUX,GAAV,EAAe;AACpE,gCAAIA,GAAJ,EAAS;AACL,iDAAOL,GAAP,CAAW,OAAX,EAAoBK,GAApB;AACA,2DAAYR,GAAZ,EAAiBQ,GAAjB,EAAsB,gBAAtB,EAAwC,GAAxC;AACH,6BAHD,MAGO;AACH,iDAAOL,GAAP,CAAW,MAAX,EAAmB,qBAAnB;AACH;AACJ,yBAPD;AAQH;AACJ,iBAlBL;AAmBH;AACJ,SA1BD;AA2BH;AA1DU,C,EAbf","file":"TaskController.js","sourcesContent":["/**\r\n * Created by Shashank on 5/4/2017.\r\n */\r\nimport jsonpatch from 'fast-json-patch';\r\nimport Jimp from 'jimp';\r\nimport logger from '../logger';\r\nimport { split } from 'lodash/string';\r\nimport APIResponse from './APIResponse';\r\n\r\n/**\r\n * TaskController.js\r\n * */\r\n\r\nexport default {\r\n\r\n    /**\r\n     * TaskController.apply_json_patch(req,res)\r\n     * Function for JSON PATCH\r\n     * */\r\n    apply_json_patch: (req, res) => {\r\n        let json = req.body.json;\r\n        logger.log('info', 'JSON Object ' ,json);\r\n        let patch_object = req.body.patch;\r\n        logger.log('info', 'PATCH Object ' , patch_object);\r\n        let patch_array = [];\r\n        patch_array[0] = patch_object;\r\n        try {\r\n            jsonpatch.apply(json, patch_array);\r\n            logger.log('info', 'MODIFIED JSON Object ' , json);\r\n            APIResponse(res, json, 'OK', 200);\r\n        }\r\n        catch (err) {\r\n            logger.log('error', err);\r\n            APIResponse(res, null, 'INVALID', 400);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * TaskController.create_thumbnail(req,res)\r\n     * Function for Creating Thumbnail of Size 50/50\r\n     * */\r\n    create_thumbnail: (req, res) => {\r\n        let image_url = req.query.image_url;\r\n        logger.log('info', 'Image Url ' , image_url);\r\n        Jimp.read(image_url, (err, image) => {\r\n            if (err || !image) {\r\n                logger.log('error', err);\r\n                APIResponse(res, null, 'UNABLE TO DOWNLOAD IMAGE', 422);\r\n            }\r\n            else {\r\n                image.resize(50, 50)\r\n                    .write(`public/ena-small-bw.jpg`, (err, img) => {\r\n                        if (err || !img) {\r\n                            logger.log('error', err);\r\n                            APIResponse(res, null, 'UNABLE TO PROCESS THE IMAGE', 422);\r\n                        }\r\n                        else {\r\n                            let dir = split(__dirname, 'dist\\\\');\r\n                            let dirname = dir[0];\r\n                            res.sendFile(`${dirname}\\\\public\\\\ena-small-bw.jpg`, {}, function (err) {\r\n                                if (err) {\r\n                                    logger.log('error', err);\r\n                                    APIResponse(res, err, 'ERROR OCCURRED', 500);\r\n                                } else {\r\n                                    logger.log('info', 'Sent : ena-small-bw');\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}